import Foundation

prefix operator **
prefix func ** (value: Int) -> Int {
	return value * value
}

let minusFive: Int = -5
let sqrtMinusFive: Int = **minusFive
print("**\(minusFive) = \(sqrtMinusFive)")

/**
 * ## 5.3 사용자 정의 연산자
 * 의도에 맞춰 연산자 역할을 변경할 수 있다. 또 기존에 존재하지 않던 연산자 기호를 만들어 추가할 수도 있다.
 *
 * 할당 연산자(=)와 삼항 연산자(?:)는 사용자 정의 역할을 부여할 수 없다.
 *
 * 기존 연산자의 역할을 변경하거나 새로운 역할을 추가하기 위해서는 기존의 연산자가 전위 연산자인지, 중위 연산자인지, 후위 연산자인지 알아야 한다.
 * - 전위 연산자: prefix	ex) !A (부울 부정 논리연산, NOT)
 * - 중위 연산자: infix	ex) A + B (산술 연산)
 * - 후위 연산자: postfix	ex) 0! (옵셔널 강제 추출)
 *
 * - operator: 키워드
 * - associativity: 결합방향
 * - precedence: 우선순위
 *
 * 사용자 정의 연산자는 ASCII 문자와 /, =, -, +, !, *, %, <, >, &, |, ^, ?, ~를 결합해서 사용한다.
 * 마침표(.)는 연산자를 표현하는 문자 중 첫 문자가 마침표 일 때만 연산자로 인식한다. ex) .+.
 * 물음표(?)도 사용자 정의 연산자에 포함시킬 수 있지만 물음표만 연산자로 재정의할 수는 없다.
 * 느낌표(!)도 사용자 정의 연산자에 포함시킬 수 있지만 느낌표만 연산자로 재정의할 수는 없다.
 * 전위 연산자는 물음표나 느낌표로 시작하는 사용자 정의 연산자를 정의할 수 없다.
 *
 * #### 사용자 정의 연산자로 사용할 수 없음
 * - 토큰으로 사용되는 =, ->, //, /*, */, .
 * - 전위 연산자 <, &, ?
 * - 중위 연산자 ?
 * - 후위 연산자 >, !, ?
 *
 * ### 5.3.1 전위 연산자 정의와 구현
 * #### 5-7 전위 연산자 구현과 사용
 */
